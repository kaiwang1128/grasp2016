el1INT.f90:                 IFAZ,J12,IBRD,IBRE,KRA,KRA1,L1,L2,MU,N,NU,ND1,ND2,   &
el1INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el1INT.f90:        IF(IBRD .LE. 0)RETURN 
el1INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el1INT.f90:        IF(IBRD .EQ. 0 .AND. IBRE .EQ.0)RETURN 
el2INT.f90:      INTEGER :: IAT,IA,IB,IBRD,IBRE,IP1,IP2,IG1,IG2,IKK,II,I2,I3, &
el2INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el2INT.f90:        IF(IBRD .LE. 0)RETURN
el31INT.f90:!                  IBRD,IBRE,IFAZ,IFAZFRCS,INN,JAA,JBB,JB1,J12,L1, &
el31INT.f90:                  IBRD,IBRE,IFAZ,INN,JAA,JBB,JB1,J12,L1, &
el31INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el31INT.f90:        IF(IBRD .LE. 0)RETURN
el32INT.f90:      INTEGER :: IIA,IIB,IIC,IID,IATIKK,IP1,IG1,II,I2,I3,IBRD,IBRE, &
el32INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el32INT.f90:        IF(IBRD .LE. 0)RETURN
el32INT.f90:!            CALL CXK(S,IS,KAPS,KRA,KRA,IBRD,1)
el33INT.f90:!                 IKK,INN,I1,I2,I3,I4,IBRD,IBRE,IFAZ,IFAZP,IFAZFRCS, &
el33INT.f90:                 IKK,INN,I1,I2,I3,I4,IBRD,IBRE,IFAZ,IFAZP, &
el33INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el33INT.f90:        IF(IBRD .LE. 0 .AND. IBRE .LE. 0)RETURN
el41INT.f90:      INTEGER ::  IA,IB,IC,II,IIA,IIB,IIC,IBRD,IBRE,IP1,IG1,IP2,IG2, &
el41INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el41INT.f90:        IF(IBRD .LE. 0)RETURN
el51INT.f90:      INTEGER :: IA,IB,IC,ID,IBRD,IBRE,II,IP1,IP2,IG1,IG2,IKK,I2,I3,  &
el51INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el51INT.f90:        IF(IBRD .LE. 0 .AND. IBRE .LE. 0)RETURN
el52INT.f90:      INTEGER :: IA,IB,IC,ID,IBRD,IBRE,II,IP1,IP2,IG1,IG2,IKK,I2,I3,  &
el52INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el52INT.f90:        IF(IBRD .LE. 0 .AND. IBRE .LE. 0)RETURN
el53INT.f90:      INTEGER :: IA,IB,IC,ID,IBRD,IBRE,II,IP1,IP2,IG1,IG2,IKK,I2,I3,  &
el53INT.f90:        CALL SNRC(IS,KAPS,KS,ND1,ND2,NE1,NE2,IBRD,IBRE)
el53INT.f90:        IF(IBRD .LE. 0 .AND. IBRE .LE. 0)RETURN
snrc.f90:      SUBROUTINE SNRC(IS, KAPS, KS, ND1, ND2, NE1, NE2, IBRD, IBRE) 
snrc.f90:!      IBRD    : Classify types of  radial  integrals  contributing;   *
snrc.f90:      INTEGER , INTENT(OUT) :: IBRD 
snrc.f90:         IBRD = -1 
snrc.f90:         IBRD = 1 
snrc.f90:            4)) IBRD = 2 
snrc.f90:         IF (IS(1)==IS(3) .AND. IS(2)==IS(4)) IBRD = 3 
snrc_I.f90:      SUBROUTINE snrc (IS, KAPS, KS, ND1, ND2, NE1, NE2, IBRD, IBRE) 
snrc_I.f90:      INTEGER, INTENT(OUT) :: IBRD 
